{
    "project": {
        "name": "kami",
        "description": "WebGL utilities for performant and flexible 2D and 3D rendering.",
        "version": "0.0.0",
        "url": ""
    },
    "files": {
        "lib/glutils/Mesh.js": {
            "name": "lib/glutils/Mesh.js",
            "modules": {
                "kami": 1
            },
            "classes": {
                "Mesh": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/glutils/NumberUtils.js": {
            "name": "lib/glutils/NumberUtils.js",
            "modules": {},
            "classes": {
                "NumberUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/glutils/ShaderProgram.js": {
            "name": "lib/glutils/ShaderProgram.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/AbstractBatch.js": {
            "name": "lib/AbstractBatch.js",
            "modules": {},
            "classes": {
                "AbstractBatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/AssetManager.js": {
            "name": "lib/AssetManager.js",
            "modules": {},
            "classes": {
                "AssetManager": 1,
                "AssetManager.ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/SpriteBatch.js": {
            "name": "lib/SpriteBatch.js",
            "modules": {},
            "classes": {
                "SpriteBatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Texture.js": {
            "name": "lib/Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/WebGLContext.js": {
            "name": "lib/WebGLContext.js",
            "modules": {},
            "classes": {
                "WebGLContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index-umd.js": {
            "name": "lib/index-umd.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "kami": {
            "name": "kami",
            "submodules": {},
            "classes": {
                "Mesh": 1,
                "NumberUtils": 1,
                "AbstractBatch": 1,
                "AssetManager": 1,
                "AssetManager.ImageLoader": 1,
                "SpriteBatch": 1,
                "Texture": 1,
                "WebGLContext": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/WebGLContext.js",
            "line": 8
        }
    },
    "classes": {
        "Mesh": {
            "name": "Mesh",
            "shortname": "Mesh",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/glutils/Mesh.js",
            "line": 8,
            "description": "A mesh class that wraps VBO and IBO."
        },
        "NumberUtils": {
            "name": "NumberUtils",
            "shortname": "NumberUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/glutils/NumberUtils.js",
            "line": 11,
            "description": "A singleton for number utilities."
        },
        "AbstractBatch": {
            "name": "AbstractBatch",
            "shortname": "AbstractBatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/AbstractBatch.js",
            "line": 13,
            "description": "An abstract batcher composed of quads (two tris, indexed). \n\nThis is used internally; users should look at \n{{#crossLink \"SpriteBatch\"}}{{/crossLink}} instead.\n\nThe batcher itself is not managed by WebGLContext; however, it makes\nuse of Mesh and Texture which will be managed. For this reason, the batcher\ndoes not hold a direct reference to the GL state.\n\nSubclasses must implement the following:  \n{{#crossLink \"AbstractBatch/_createShader:method\"}}{{/crossLink}}  \n{{#crossLink \"AbstractBatch/_createVertexAttributes:method\"}}{{/crossLink}}  \n{{#crossLink \"AbstractBatch/getVertexSize:method\"}}{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "the context this batcher belongs to",
                    "type": "WebGLContext"
                },
                {
                    "name": "size",
                    "description": "the optional size of this batch, i.e. max number of quads",
                    "type": "Number"
                }
            ],
            "default": "500"
        },
        "AssetManager": {
            "name": "AssetManager",
            "shortname": "AssetManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/AssetManager.js",
            "line": 8,
            "description": "This is a utility which makes asset loading cleaner\nand simpler, especially with regard to asynchronous image\nloading and WebGL context loss.\n\n\nBasic usage looks like this:\n\n    //Create an asset manager \n    var assets = new AssetManager(context);\n \n    //image types will return a new Texture\n    var tex0 = assets.load(\"img/grass.png\");\n    var tex1 = assets.load(\"img/scene.png\");\n\n    ... inside game loop ...\n\n        if (assets.update()) {\n            // all assets are loaded, we can render.\n        } else {\n            // not all assets are loaded. we need\n            // to show our preloader.\n        }\n\nCurrently this class only supports image loading,\nalthough in the future others could be added for \ncompressed textures, sprite sheets, and so forth.\n\nCreating a new asset manager will listen for context\nloss events on the given WebGLContext. When this happens,\nall assets will be invalidated and added to the loading queue.\nAs such, update() will return false until the assets have been\nre-loaded.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "the WebGLContext for this manager",
                    "type": "WebGLContext"
                }
            ]
        },
        "AssetManager.ImageLoader": {
            "name": "AssetManager.ImageLoader",
            "shortname": "AssetManager.ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/AssetManager.js",
            "line": 450,
            "description": "This is the default implementation of an image loader plugin for AssetManager.\nThis uses a DOM Image object to upload PNG, GIF and JPG images to a WebGL\ntexture. You will not need to deal with this class directly, unless you want\nto write your own AssetManager loaders.\n\nA `Loader` type for AssetManager is simply an object which defines two methods:\n\n- `loadAsset`: this is the loading function, which handles the asynchronous load.\n- `processArguments`: this is for the user's convenience, handling default arguments\nand giving a meaningful return value."
        },
        "SpriteBatch": {
            "name": "SpriteBatch",
            "shortname": "SpriteBatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/SpriteBatch.js",
            "line": 14,
            "description": "A basic implementation of a batcher which draws 2D sprites.\nThis uses two triangles (quads) with indexed and interleaved\nvertex data. Each vertex holds 5 floats (Position.xy, Color, TexCoord0.xy).\n\nThe color is packed into a single float to reduce vertex bandwidth, and\nthe data is interleaved for best performance. We use a static index buffer,\nand a dynamic vertex buffer that is updated with bufferSubData.",
            "example": [
                "\n     var SpriteBatch = require('kami').SpriteBatch;  \n     \n     //create a new batcher\n     var batch = new SpriteBatch(context);\n\n     function render() {\n         batch.begin();\n         \n         //draw some sprites in between begin and end...\n         batch.draw( texture, 0, 0, 25, 32 );\n         batch.draw( texture1, 0, 25, 42, 23 );\n\n         batch.end();\n     }"
            ],
            "extends": "AbstractBatch",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "the context for this batch",
                    "type": "WebGLContext"
                },
                {
                    "name": "size",
                    "description": "the max number of sprites to fit in a single batch",
                    "type": "Number"
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/Texture.js",
            "line": 11,
            "description": "Creates a new texture with the optional width, height, and data.\n\nIf the constructor is passed no parameters other than WebGLContext, then\nit will not be initialized and will be non-renderable. You will need to manually\nuploadData or uploadImage yourself.\n\nIf you pass a width and height, the texture will be initialized with that size\nand null data (e.g. transparent black). If you also pass the format and data, \nit will be uploaded to the texture. \n\nThe arguments are kept in memory for future context restoration events. If\nthis is undesirable (e.g. huge buffers which need to be GC'd), you should not\npass the data in the constructor, but instead upload it after creating an uninitialized \ntexture. You will need to manage it yourself, either by extending the create() method, \nor listening to restored events in WebGLContext.\n\nMost users will want to use the AssetManager to create and manage their textures\nwith asynchronous loading and context loss.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "the WebGL context",
                    "type": "WebGLContext"
                },
                {
                    "name": "width",
                    "description": "the width of this texture",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of this texture",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "e.g. Texture.Format.RGBA",
                    "type": "GLenum"
                },
                {
                    "name": "dataType",
                    "description": "e.g. Texture.DataType.UNSIGNED_BYTE (Uint8Array)",
                    "type": "GLenum"
                },
                {
                    "name": "data",
                    "description": "the array buffer, e.g. a Uint8Array view",
                    "type": "GLenum"
                }
            ]
        },
        "WebGLContext": {
            "name": "WebGLContext",
            "shortname": "WebGLContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "kami",
            "namespace": "",
            "file": "lib/WebGLContext.js",
            "line": 8,
            "description": "A thin wrapper around WebGLRenderingContext which handles\ncontext loss and restore with various rendering objects (textures,\nshaders and buffers). This also handles general viewport management.\n\nIf the view is not specified, a canvas will be created.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "the width of the GL canvas",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the GL canvas",
                    "type": "Number"
                },
                {
                    "name": "view",
                    "description": "the optional DOM canvas element",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "contextAttribuets",
                    "description": "an object containing context attribs which\n                                  will be used during GL initialization",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/glutils/Mesh.js",
            "line": 16,
            "description": "A write-only property which sets both vertices and indices \nflag to dirty or not.",
            "itemtype": "property",
            "name": "dirty",
            "type": "{Boolean}",
            "writeonly": "",
            "class": "Mesh",
            "module": "kami"
        },
        {
            "file": "lib/glutils/Mesh.js",
            "line": 31,
            "description": "Creates a new Mesh with the provided parameters.\n\nIf numIndices is 0 or falsy, no index buffer will be used\nand indices will be an empty ArrayBuffer and a null indexBuffer.\n\nIf isStatic is true, then vertexUsage and indexUsage will\nbe set to gl.STATIC_DRAW. Otherwise they will use gl.DYNAMIC_DRAW.\nYou may want to adjust these after initialization for further control.",
            "params": [
                {
                    "name": "context",
                    "description": "the context for management",
                    "type": "WebGLContext"
                },
                {
                    "name": "isStatic",
                    "description": "a hint as to whether this geometry is static",
                    "type": "Boolean"
                },
                {
                    "name": "numVerts",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "numIndices",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "vertexAttribs",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Mesh",
            "module": "kami"
        },
        {
            "file": "lib/glutils/Mesh.js",
            "line": 70,
            "itemtype": "property",
            "name": "",
            "access": "private",
            "tagname": "",
            "class": "Mesh",
            "module": "kami"
        },
        {
            "file": "lib/glutils/Mesh.js",
            "line": 76,
            "itemtype": "property",
            "name": "",
            "access": "private",
            "tagname": "",
            "class": "Mesh",
            "module": "kami"
        },
        {
            "file": "lib/glutils/Mesh.js",
            "line": 246,
            "description": "Location is optional and for advanced users that\nwant vertex arrays to match across shaders. Any non-numerical\nvalue will be converted to null, and ignored. If a numerical\nvalue is given, it will override the position of this attribute\nwhen given to a mesh.",
            "params": [
                {
                    "name": "name",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "numComponents",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "location",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Mesh",
            "module": "kami"
        },
        {
            "file": "lib/glutils/NumberUtils.js",
            "line": 20,
            "description": "Returns a float representation of the given int bits. ArrayBuffer\nis used for the conversion.",
            "itemtype": "method",
            "name": "intBitsToFloat",
            "static": 1,
            "params": [
                {
                    "name": "i",
                    "description": "the int to cast",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the float",
                "type": "Number"
            },
            "class": "NumberUtils",
            "module": "kami"
        },
        {
            "file": "lib/glutils/NumberUtils.js",
            "line": 34,
            "description": "Returns the int bits from the given float. ArrayBuffer is used\nfor the conversion.",
            "itemtype": "method",
            "name": "floatToIntBits",
            "static": 1,
            "params": [
                {
                    "name": "f",
                    "description": "the float to cast",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the int bits",
                "type": "Number"
            },
            "class": "NumberUtils",
            "module": "kami"
        },
        {
            "file": "lib/glutils/NumberUtils.js",
            "line": 48,
            "description": "Encodes ABGR int as a float, with slight precision loss.",
            "itemtype": "method",
            "name": "intToFloatColor",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "an ABGR packed integer",
                    "type": "Number"
                }
            ],
            "class": "NumberUtils",
            "module": "kami"
        },
        {
            "file": "lib/glutils/NumberUtils.js",
            "line": 59,
            "description": "Returns a float encoded ABGR value from the given RGBA\nbytes (0 - 255). Useful for saving bandwidth in vertex data.",
            "itemtype": "method",
            "name": "colorToFloat",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "the Red byte (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "the Green byte (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "the Blue byte (0 - 255)",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "the Alpha byte (0 - 255)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a Float32 of the RGBA color",
                "type": "Float32"
            },
            "class": "NumberUtils",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 37,
            "description": "This is called during the ShaderProgram constructor,\nand may need to be called again after context loss and restore.",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 160,
            "description": "Returns the cached uniform info (size, type, location).\nIf the uniform is not found in the cache, it is assumed\nto not exist, and this method returns null.\n\nThis may return null even if the uniform is defined in GLSL:\nif it is _inactive_ (i.e. not used in the program) then it may\nbe optimized out.",
            "params": [
                {
                    "name": "name",
                    "description": "the uniform name as defined in GLSL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an object containing location, size, and type",
                "type": "Object"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 176,
            "description": "Returns the cached attribute info (size, type, location).\nIf the attribute is not found in the cache, it is assumed\nto not exist, and this method returns null.\n\nThis may return null even if the attribute is defined in GLSL:\nif it is _inactive_ (i.e. not used in the program or disabled) \nthen it may be optimized out.",
            "params": [
                {
                    "name": "name",
                    "description": "the attribute name as defined in GLSL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an object containing location, size and type",
                "type": "Object"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 193,
            "description": "Returns the cached uniform location object.\nIf the uniform is not found, this method returns null.",
            "params": [
                {
                    "name": "name",
                    "description": "the uniform name as defined in GLSL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the location object",
                "type": "GLint"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 205,
            "description": "Returns the cached uniform location object.",
            "params": [
                {
                    "name": "name",
                    "description": "the uniform name as defined in GLSL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the location object",
                "type": "WebGLUniformLocation"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 216,
            "description": "Returns true if the uniform is active and found in this\ncompiled program.",
            "params": [
                {
                    "name": "name",
                    "description": "the uniform name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the uniform is found and active",
                "type": "Boolean"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 227,
            "description": "Returns true if the attribute is active and found in this\ncompiled program.",
            "params": [
                {
                    "name": "name",
                    "description": "the attribute name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the attribute is found and active",
                "type": "Boolean"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 238,
            "description": "Returns the uniform value by name.",
            "params": [
                {
                    "name": "name",
                    "description": "the uniform name as defined in GLSL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the WebGL uniform",
                "type": "Any"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 248,
            "description": "Returns the uniform value at the specified WebGLUniformLocation.",
            "params": [
                {
                    "name": "location",
                    "description": "the location object",
                    "type": "WebGLUniformLocation"
                }
            ],
            "return": {
                "description": "The value of the WebGL uniform",
                "type": "Any"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 306,
            "description": "A convenience method to set uniformNfv from the given ArrayBuffer.\nWe determine which GL call to make based on the length of the array \nbuffer.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the uniform",
                    "type": "String"
                },
                {
                    "name": "arrayBuffer",
                    "description": "the array buffer",
                    "type": "ArrayBuffer"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/glutils/ShaderProgram.js",
            "line": 329,
            "description": "A convenience method to set uniformNfv from the given ArrayBuffer.\nWe determine which GL call to make based on the length of the array \nbuffer.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the uniform",
                    "type": "String"
                },
                {
                    "name": "arrayBuffer",
                    "description": "the array buffer",
                    "type": "ArrayBuffer"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 62,
            "description": "The ABGR packed color, as a single float. The default\nvalue is the color white (255, 255, 255, 255).",
            "itemtype": "property",
            "name": "color",
            "type": "Number",
            "readonly": "",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 71,
            "description": "Whether to premultiply alpha on calls to setColor. \nThis is true by default, so that we can conveniently write:\n\n    batch.setColor(1, 0, 0, 0.25); //tints red with 25% opacity\n\nIf false, you must premultiply the colors yourself to achieve\nthe same tint, like so:\n\n    batch.setColor(0.25, 0, 0, 0.25);",
            "itemtype": "property",
            "name": "premultiplyColor",
            "type": "{Boolean}",
            "default": "true",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 89,
            "description": "Sets the color of this sprite batcher, which is used in subsequent draw\ncalls. This does not flush the batch.\n\nIf three or more arguments are specified, this method assumes that RGB \nor RGBA float values (0.0 to 1.0) are being passed. \n\nIf less than three arguments are specified, we only consider the first \nand assign it to all four components -- this is useful for setting transparency \nin a premultiplied alpha stage.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "r",
                    "description": "the red component, normalized",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "the green component, normalized",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "the blue component, normalized",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "the alpha component, normalized",
                    "type": "Number"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 128,
            "description": "Called from the constructor to create a new Mesh \nbased on the expected batch size. Should set up\nverts & indices properly.\n\nUsers should not call this directly; instead, it\nshould only be implemented by subclasses.",
            "itemtype": "method",
            "name": "_createMesh",
            "params": [
                {
                    "name": "size",
                    "description": "the size passed through the constructor",
                    "type": "Number"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 171,
            "description": "Returns a shader for this batch. If you plan to support\nmultiple instances of your batch, it may or may not be wise\nto use a shared shader to save resources.\n\nThis method initially throws an error; so it must be overridden by\nsubclasses of AbstractBatch.",
            "itemtype": "method",
            "name": "_createShader",
            "return": {
                "description": "the size of a vertex, in # of floats",
                "type": "Number"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 186,
            "description": "Returns an array of vertex attributes for this mesh; \nsubclasses should implement this with the attributes \nexpected for their batch.\n\nThis method initially throws an error; so it must be overridden by\nsubclasses of AbstractBatch.",
            "itemtype": "method",
            "name": "_createVertexAttributes",
            "return": {
                "description": "an array of Mesh.VertexAttrib objects",
                "type": "Array"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 202,
            "description": "Returns the number of floats per vertex for this batcher.\n\nThis method initially throws an error; so it must be overridden by\nsubclasses of AbstractBatch.",
            "itemtype": "method",
            "name": "getVertexSize",
            "return": {
                "description": "the size of a vertex, in # of floats",
                "type": "Number"
            },
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 216,
            "description": "Begins the sprite batch. This will bind the shader\nand mesh. Subclasses may want to disable depth or \nset up blending.",
            "itemtype": "method",
            "name": "begin",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 234,
            "description": "Ends the sprite batch. This will flush any remaining \ndata and set GL state back to normal.",
            "itemtype": "method",
            "name": "end",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 250,
            "description": "Called before rendering to bind new textures.\nThis method does nothing by default.",
            "itemtype": "method",
            "name": "_preRender",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 259,
            "description": "Called after flushing the batch. This method\ndoes nothing by default.",
            "itemtype": "method",
            "name": "_postRender",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 268,
            "description": "Flushes the batch by pushing the current data\nto GL.",
            "itemtype": "method",
            "name": "flush",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 294,
            "description": "Adds a sprite to this batch.\nThe specifics depend on the sprite batch implementation.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "texture",
                    "description": "the texture for this sprite",
                    "type": "Texture"
                },
                {
                    "name": "x",
                    "description": "the x position, defaults to zero",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position, defaults to zero",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width, defaults to the texture width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height, defaults to the texture height",
                    "type": "Number"
                },
                {
                    "name": "u1",
                    "description": "the first U coordinate, default zero",
                    "type": "Number"
                },
                {
                    "name": "v1",
                    "description": "the first V coordinate, default zero",
                    "type": "Number"
                },
                {
                    "name": "u2",
                    "description": "the second U coordinate, default one",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "the second V coordinate, default one",
                    "type": "Number"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 312,
            "description": "Adds a single quad mesh to this sprite batch from the given\narray of vertices.\nThe specifics depend on the sprite batch implementation.",
            "itemtype": "method",
            "name": "drawVertices",
            "params": [
                {
                    "name": "texture",
                    "description": "the texture we are drawing for this sprite",
                    "type": "Texture"
                },
                {
                    "name": "verts",
                    "description": "an array of vertices",
                    "type": "Float32Array"
                },
                {
                    "name": "off",
                    "description": "the offset into the vertices array to read from",
                    "type": "Number"
                }
            ],
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AbstractBatch.js",
            "line": 325,
            "description": "Destroys the batch, deleting its buffers and removing it from the\nWebGLContext management. Trying to use this\nbatch after destroying it can lead to unpredictable behaviour.",
            "itemtype": "method",
            "name": "destroy",
            "class": "AbstractBatch",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 49,
            "description": "A read-only property that describes the number of \nassets remaining to be loaded.",
            "itemtype": "attribute",
            "name": "remaining",
            "type": "{Number}",
            "readonly": "",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 63,
            "description": "A read-only property that descriibes the total\nnumber of assets in this AssetManager.",
            "itemtype": "attribute",
            "name": "total",
            "readonly": "",
            "type": "{Number}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 82,
            "description": "An array of assets that this AssetManager is handling.\nThis should not be modified directly.",
            "itemtype": "property",
            "name": "assets",
            "type": "{Array}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 91,
            "description": "The queue of tasks to load. Each contains\nan\n{{#crossLink \"AssetManager.Descriptor\"}}{{/crossLink}}.\n\nLoading a task will pop it off this list and fire the async\nor synchronous process.\n\nThis should not be modified directly.",
            "itemtype": "property",
            "name": "tasks",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 116,
            "description": "A signal dispatched when loading first begins, \ni.e. when update() is called and the loading queue is the\nsame size as the total asset list.",
            "itemtype": "event",
            "name": "loadStarted",
            "type": "{Signal}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 126,
            "description": "A signal dispatched when all assets have been loaded\n(i.e. their async tasks finished).",
            "itemtype": "event",
            "name": "loadFinished",
            "type": "{Signal}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 135,
            "description": "A signal dispatched on progress updates, once an asset\nhas been loaded in full (i.e. its async task finished).\n\nThis passes three arguments to the listener function:\n\n- `current` number of assets that have been loaded\n- `total` number of assets to loaded\n- `name` of the asset which was just loaded",
            "itemtype": "event",
            "name": "loadProgress",
            "type": "{[type]}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 150,
            "description": "A signal dispatched on problematic load; e.g. if\nthe image was not found and \"onerror\" was triggered. \nThe first argument passed to the listener will be \nthe string name of the asset.\n\nThe asset manager will continue loading subsequent assets.\n\nThis is dispatched after the status of the asset is\nset to Status.LOAD_FAIL, and before the loadProgress\nsignal is dispatched.",
            "itemtype": "event",
            "name": "loadError",
            "type": "{Signal}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 176,
            "description": "Destroys this asset manager; removing its listeners\nwith WebGLContext and deleting the assets array.",
            "itemtype": "method",
            "name": "destroy",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 189,
            "description": "Called to invalidate the asset manager\nand require all assets to be re-loaded.\nThis is called internally on context loss.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "invalidate",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 208,
            "description": "Pushes an asset onto this stack. This\nattempts to detect the loader for you based\non the asset name's file extension. If the\nasset name doesn't have a known file extension,\nor if there is no loader registered for that filename,\nthis method throws an error. \n\nThe first argument is the asset name. Any subsequent\narguments will be passed along to the loader for further\nprocessing.\n\nThe return value of this method is determined by\nthe loader's processArguments method. For example, the\ndefault Image loader returns a Texture object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "name",
                    "description": "the asset name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "a variable number of optional arguments",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "returns the best type for this asset's loader",
                "type": "Any"
            },
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 249,
            "description": "Pushes an asset onto this stack. This allows you to\nspecify a loader function for the asset. This is useful\nif you wish to use generic names for your assets (instead of\nfilenames), or if you want a particular asset to use a specific\nloader. \n\nLike with {{#crossLink \"AssetManager/load:method\"}}{{/crossLink}},\nthe first argument is the asset name. The second argument is the loader\nto use for this asset. Any subsequent\narguments will be passed along to the loader for further\nprocessing.\n\nThe return value of this method is determined by\nthe loader's processArguments method. For example, the\ndefault Image loader returns a Texture object.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "name",
                    "description": "the asset name",
                    "type": "String"
                },
                {
                    "name": "loader",
                    "description": "the loader function",
                    "type": "Fucntion"
                },
                {
                    "name": "args",
                    "description": "a variable number of optional arguments",
                    "type": "Object ..."
                }
            ],
            "return": {
                "description": "returns the best type for this asset's loader",
                "type": "Any"
            },
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 343,
            "description": "Updates this AssetManager by loading the next asset in the queue.\nIf all assets have been loaded, this method returns true, otherwise\nit will return false.",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "whether this asset manager has finished loading",
                "type": "Boolean"
            },
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 378,
            "description": "A set of loader plugins for this asset manager. These might be as simple\nas pushing HTML Image objects into a Texture, or more complex like decoding\na compressed, mip-mapped, or cube-map texture.\n\nThis object is a simple hashmap of lower-case extension names to Loader functions.",
            "itemtype": "property",
            "name": "loaders",
            "static": 1,
            "type": "{Object}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 391,
            "description": "Registers a loader function with the given extension(s).\nThe first parameter is a loader function, and all subsequent\nparameters are lower-case extensions (without the period) that\nshould be associated with that loader. This will override other\nloaders by the same extension.\n\nBy default, the extensions \"png\", \"jpg\", \"jpeg\", and \"gif\" are\nregistered to {{#crossLink \"AssetManager/ImageLoader:attribute\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "registerLoader",
            "static": 1,
            "params": [
                {
                    "name": "loaderFunc",
                    "description": "the loader function",
                    "type": "Function"
                },
                {
                    "name": "extensions",
                    "description": "a variable number of strings",
                    "type": "String ..."
                }
            ],
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 414,
            "description": "A simple wrapper for assets which will be passed along to the loader;\nthis is used internally.\n\n//@class AssetManager.Descriptor",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 436,
            "description": "Defines the status of an asset in the manager queue.",
            "type": "{Object}",
            "class": "AssetManager",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 466,
            "description": "This is a \"loader function\" which handles the asynchronous\nloading for an asset. The function must be implemented in a very\nstrict manner for the asset manager to work correctly.\n\nThe first parameter passed to this function is the name of the\nasset being loaded. The second parameter is a callback that must\nbe invoked after the async task is completed.\nAny subsequent parameters are those that came from the inital call\nto {{#crossLink \"AssetManager/load:method\"}}AssetManager.load{{/crossLink}}. \n\nOnce the synchronous or asynchronous loading task is completed, the\n`finished` callback must be invoked with two parameters: first, the\n`name` of the asset as passed to this loader. And second, a boolean indicating\nthe `success` of the load operation. \n\nIf you don't invoke the callback, the asset manager may never finish loading.",
            "itemtype": "method",
            "name": "loadAsset",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the asset to load",
                    "type": "String"
                },
                {
                    "name": "finished",
                    "description": "the function to call when async loading is complete",
                    "type": "Function"
                },
                {
                    "name": "texture",
                    "description": "the texture to operate on for this asset",
                    "type": "Texture"
                },
                {
                    "name": "path",
                    "description": "the optional image path to use instead of the `name` parameter",
                    "type": "String"
                }
            ],
            "class": "AssetManager.ImageLoader",
            "module": "kami"
        },
        {
            "file": "lib/AssetManager.js",
            "line": 528,
            "description": "This method is called from \n{{#crossLink \"AssetManager/load:method\"}}AssetManager.load{{/crossLink}} to\nprocess the arguments and setup any default values. This is also responsible for\ndetermining the appropriate return value for the load function. In the case of\n`ImageLoader`, we return the Texture that was passed to the load() function, or\na new Texture object if none was given. This way, the user can write code like this:\n\n      var texture = assetManager.load(\"img.png\"); //returns new Texture\n\nThe first argument is the name of the asset being processed. The second argument\nis an array of arguments that will be passed to the loader function.\n\nThe method is called bound to the AssetManager, so we can access WebGLContext\nwith \"this.context\".",
            "itemtype": "method",
            "name": "processArguments",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the asset name",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "an array of parameters that will be used to load the asset",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the object the user may expect from the loader, in this case a Texture object",
                "type": "Any"
            },
            "class": "AssetManager.ImageLoader",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 53,
            "description": "SpriteBatch uploads a vec2 for projection\ntransform in the shader. A custom shader might\nuse a matrix or some other means of calculating \nprojection; in which case this should be set to false.",
            "itemtype": "property",
            "name": "useProjectionVector",
            "type": "{Boolean}",
            "default": "true",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 65,
            "description": "The projection Float32Array vec2 which is\nused to avoid some matrix calculations. A 3D \nbatcher might want to replace this and \n{{#crossLink \"SpriteBatch/setProjection:method\"}}{{/crossLink}} \nentirely.",
            "itemtype": "property",
            "name": "projection",
            "type": "{Float32Array}",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 77,
            "description": "The currently bound texture. Do not modify.",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "readonly": "",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 86,
            "description": "The number of floats per vertex for this batcher \n(Position.xy + Color + TexCoord0.xy).",
            "itemtype": "method",
            "name": "getVertexSize",
            "return": {
                "description": "the number of floats per vertex",
                "type": "Number"
            },
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 97,
            "description": "Used internally to return the Position, Color, and TexCoord0 attributes.",
            "itemtype": "method",
            "name": "_createVertexAttribuets",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 116,
            "description": "Sets the projection vector, an x and y\ndefining the middle points of your stage.",
            "itemtype": "method",
            "name": "setProjection",
            "params": [
                {
                    "name": "x",
                    "description": "the x projection value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y projection value",
                    "type": "Number"
                }
            ],
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 137,
            "description": "Creates a default shader for this batch.",
            "itemtype": "method",
            "name": "_createShader",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "a new instance of ShaderProgram",
                "type": "ShaderProgram"
            },
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 153,
            "description": "This is called during rendering to update projection/transform\nmatrices and upload the new values to the shader. For example,\nif the user calls setProjection mid-draw, the batch will flush\nand this will be called before continuing to add items to the batch.\n\nYou generally should not need to call this directly.",
            "itemtype": "method",
            "name": "updateMatrices",
            "access": "protected",
            "tagname": "",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 171,
            "description": "Called before rendering, and binds the current texture.",
            "itemtype": "method",
            "name": "_preRender",
            "access": "protected",
            "tagname": "",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 182,
            "description": "Binds the shader, disables depth writing, \nenables blending, activates texture unit 0, and sends\ndefault matrices and sampler2D uniforms to the shader.",
            "itemtype": "method",
            "name": "begin",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 217,
            "description": "Ends the sprite batcher and flushes any remaining data to the GPU.",
            "itemtype": "method",
            "name": "end",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 236,
            "description": "Flushes the batch to the GPU. This should be called when\nstate changes, such as blend functions, depth or stencil states,\nshaders, and so forth.",
            "itemtype": "method",
            "name": "flush",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 253,
            "description": "Adds a sprite to this batch. The sprite is drawn in \nscreen-space with the origin at the upper-left corner (y-down).",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "texture",
                    "description": "the texture for this sprite",
                    "type": "Texture"
                },
                {
                    "name": "x",
                    "description": "the x position in pixels, defaults to zero",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position in pixels, defaults to zero",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width in pixels, defaults to the texture width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height in pixels, defaults to the texture height",
                    "type": "Number"
                },
                {
                    "name": "u1",
                    "description": "the first U coordinate, default zero",
                    "type": "Number"
                },
                {
                    "name": "v1",
                    "description": "the first V coordinate, default zero",
                    "type": "Number"
                },
                {
                    "name": "u2",
                    "description": "the second U coordinate, default one",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "the second V coordinate, default one",
                    "type": "Number"
                }
            ],
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 338,
            "description": "Adds a single quad mesh to this sprite batch from the given\narray of vertices. The sprite is drawn in \nscreen-space with the origin at the upper-left corner (y-down).\n\nThis reads 20 interleaved floats from the given offset index, in the format\n\n { x, y, color, u, v,\n     ...  }",
            "itemtype": "method",
            "name": "drawVertices",
            "params": [
                {
                    "name": "texture",
                    "description": "the texture we are drawing for this sprite",
                    "type": "Texture"
                },
                {
                    "name": "verts",
                    "description": "an array of vertices",
                    "type": "Float32Array"
                },
                {
                    "name": "off",
                    "description": "the offset into the vertices array to read from",
                    "type": "Number"
                }
            ],
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 409,
            "description": "The default vertex size, i.e. number of floats per vertex.",
            "itemtype": "attribute",
            "name": "VERTEX_SIZE",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "default": "5",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/SpriteBatch.js",
            "line": 419,
            "description": "Incremented after each draw call, can be used for debugging.\n\n    SpriteBatch.totalRenderCalls = 0;\n\n    ... draw your scene ...\n\n    console.log(\"Draw calls per frame:\", SpriteBatch.totalRenderCalls);",
            "itemtype": "attribute",
            "name": "totalRenderCalls",
            "static": 1,
            "type": "{Number}",
            "default": "0",
            "class": "SpriteBatch",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 45,
            "description": "The WebGLTexture which backs this Texture object. This\ncan be used for low-level GL calls.",
            "type": "{WebGLTexture}",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 53,
            "description": "The target for this texture unit, i.e. TEXTURE_2D. Subclasses\nshould override the create() method to change this, for correct\nusage with context restore.",
            "itemtype": "property",
            "name": "target",
            "type": "{GLenum}",
            "default": "gl.TEXTURE_2D",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 64,
            "description": "The width of this texture, in pixels.",
            "itemtype": "property",
            "name": "width",
            "readonly": "",
            "type": "{Number} the width",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 73,
            "description": "The height of this texture, in pixels.",
            "itemtype": "property",
            "name": "height",
            "readonly": "",
            "type": "{Number} the height",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 92,
            "description": "When a texture is created, we keep track of the arguments provided to \nits constructor. On context loss and restore, these arguments are re-supplied\nto the Texture, so as to re-create it in its correct form.\n\nThis is mainly useful if you are procedurally creating textures and passing\ntheir data directly (e.g. for generic lookup tables in a shader). For image\nor media based textures, it would be better to use an AssetManager to manage\nthe asynchronous texture upload.\n\nUpon destroying a texture, a reference to this is also lost.",
            "type": "{Array} the array of arguments, shifted to exclude the WebGLContext parameter",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 113,
            "description": "Called in the Texture constructor, and after the GL context has been re-initialized. \nSubclasses can override this to provide a custom data upload, e.g. cubemaps or compressed\ntextures.",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 145,
            "description": "Destroys this texture by deleting the GL resource,\nremoving it from the WebGLContext management stack,\nsetting its size to zero, and id and managed arguments to null.\n\nGenerally a destroyed texture is no longer usable.",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 162,
            "description": "Sets the wrap mode for this texture; if the second argument\nis undefined or falsy, then both S and T wrap will use the first\nargument.\n\nYou can use Texture.Wrap constants for convenience, to avoid needing \na GL reference.",
            "itemtype": "method",
            "name": "setWrap",
            "params": [
                {
                    "name": "s",
                    "description": "the S wrap mode",
                    "type": "GLenum"
                },
                {
                    "name": "t",
                    "description": "the T wrap mode",
                    "type": "GLenum"
                },
                {
                    "name": "ignoreBind",
                    "description": "(optional) if true, the bind will be ignored.",
                    "type": "Boolean"
                }
            ],
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 191,
            "description": "Sets the min and mag filter for this texture; \nif mag is undefined or falsy, then both min and mag will use the\nfilter specified for min.\n\nYou can use Texture.Filter constants for convenience, to avoid needing \na GL reference.",
            "params": [
                {
                    "name": "min",
                    "description": "the minification filter",
                    "type": "GLenum"
                },
                {
                    "name": "mag",
                    "description": "the magnification filter",
                    "type": "GLenum"
                },
                {
                    "name": "ignoreBind",
                    "description": "if true, the bind will be ignored.",
                    "type": "Boolean"
                }
            ],
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 218,
            "description": "A low-level method to upload the specified ArrayBufferView\nto this texture. This will cause the width and height of this\ntexture to change.",
            "itemtype": "method",
            "name": "uploadData",
            "params": [
                {
                    "name": "width",
                    "description": "the new width of this texture,\n                                defaults to the last used width (or zero)",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the new height of this texture\n                                defaults to the last used height (or zero)",
                    "type": "Number"
                },
                {
                    "name": "format",
                    "description": "the data format, default RGBA",
                    "type": "GLenum"
                },
                {
                    "name": "type",
                    "description": "the data type, default UNSIGNED_BYTE (Uint8Array)",
                    "type": "GLenum"
                },
                {
                    "name": "data",
                    "description": "the raw data for this texture, or null for an empty image",
                    "type": "ArrayBufferView"
                }
            ],
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 249,
            "description": "Uploads ImageData, HTMLImageElement, HTMLCanvasElement or \nHTMLVideoElement.",
            "itemtype": "method",
            "name": "uploadImage",
            "params": [
                {
                    "name": "domObject",
                    "description": "the DOM image container",
                    "type": "Object"
                }
            ],
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 271,
            "description": "Binds the texture. If unit is specified,\nit will bind the texture at the given slot\n(TEXTURE0, TEXTURE1, etc). If unit is not specified,\nit will simply bind the texture at whichever slot\nis currently active.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "unit",
                    "description": "the texture unit index, starting at 0",
                    "type": "Number"
                }
            ],
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 293,
            "description": "A set of Filter constants that match their GL counterparts.\nThis is for convenience, to avoid the need for a GL rendering context.",
            "example": [
                "\n```\n    Texture.Filter.NEAREST\n    Texture.Filter.NEAREST_MIPMAP_LINEAR\n    Texture.Filter.NEAREST_MIPMAP_NEAREST\n    Texture.Filter.LINEAR\n    Texture.Filter.LINEAR_MIPMAP_LINEAR\n    Texture.Filter.LINEAR_MIPMAP_NEAREST\n```"
            ],
            "itemtype": "attribute",
            "name": "Filter",
            "static": 1,
            "type": "{Object}",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 319,
            "description": "A set of Wrap constants that match their GL counterparts.\nThis is for convenience, to avoid the need for a GL rendering context.",
            "example": [
                "\n```\n    Texture.Wrap.CLAMP_TO_EDGE\n    Texture.Wrap.MIRRORED_REPEAT\n    Texture.Wrap.REPEAT\n```"
            ],
            "itemtype": "attribute",
            "name": "Wrap",
            "static": 1,
            "type": "{Object}",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 339,
            "description": "A set of Format constants that match their GL counterparts.\nThis is for convenience, to avoid the need for a GL rendering context.",
            "example": [
                "\n```\n    Texture.Format.RGB\n    Texture.Format.RGBA\n    Texture.Format.LUMINANCE_ALPHA\n```"
            ],
            "itemtype": "attribute",
            "name": "Format",
            "static": 1,
            "type": "{Object}",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 362,
            "description": "A set of DataType constants that match their GL counterparts.\nThis is for convenience, to avoid the need for a GL rendering context.",
            "example": [
                "\n```\n    Texture.DataType.UNSIGNED_BYTE \n    Texture.DataType.FLOAT \n```"
            ],
            "itemtype": "attribute",
            "name": "DataType",
            "static": 1,
            "type": "{Object}",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 388,
            "description": "The default wrap mode when creating new textures. If a custom \nprovider was specified, it may choose to override this default mode.",
            "itemtype": "attribute",
            "name": "DEFAULT_WRAP",
            "type": "GLenum",
            "static": 1,
            "default": "Texture.Wrap.CLAMP_TO_EDGE",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 399,
            "description": "The default filter mode when creating new textures. If a custom\nprovider was specified, it may choose to override this default mode.",
            "itemtype": "attribute",
            "name": "DEFAULT_FILTER",
            "type": "GLenum",
            "static": 1,
            "default": "Texture.Filter.LINEAR",
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/Texture.js",
            "line": 415,
            "description": "Utility to get the number of components for the given GLenum, e.g. gl.RGBA returns 4.\nReturns null if the specified format is not of type DEPTH_COMPONENT, ALPHA, LUMINANCE,\nLUMINANCE_ALPHA, RGB, or RGBA.",
            "itemtype": "method",
            "name": "getNumComponents",
            "static": 1,
            "params": [
                {
                    "name": "format",
                    "description": "a texture format, i.e. Texture.Format.RGBA",
                    "type": "GLenum"
                }
            ],
            "return": {
                "description": "the number of components for this format",
                "type": "Number"
            },
            "class": "Texture",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 26,
            "description": "The list of rendering objects (shaders, VBOs, textures, etc) which are \ncurrently being managed. Any object with a \"create\" method can be added\nto this list. Upon destroying the rendering object, it should be removed.\nSee addManagedObject and removeManagedObject.",
            "itemtype": "property",
            "name": "managedObjects",
            "type": "Array",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 36,
            "description": "The actual GL context. You can use this for\nraw GL calls or to access GLenum constants. This\nwill be updated on context restore. While the WebGLContext\nis not `valid`, you should not try to access GL state.",
            "itemtype": "property",
            "name": "gl",
            "type": "{WebGLRenderingContext}",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 47,
            "description": "The canvas DOM element for this context.",
            "itemtype": "property",
            "name": "view",
            "type": "Number",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 56,
            "description": "The width of this canvas.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 64,
            "description": "The height of this canvas.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 72,
            "description": "The context attributes for initializing the GL state. This might include\nanti-aliasing, alpha settings, verison, and so forth.",
            "itemtype": "property",
            "name": "contextAttributes",
            "type": "Object",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 80,
            "description": "Whether this context is 'valid', i.e. renderable. A context that has been lost\n(and not yet restored) is invalid.",
            "itemtype": "property",
            "name": "valid",
            "type": "Boolean",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 88,
            "description": "A signal dispatched when GL context is lost. \n\nThe first argument passed to the listener is the WebGLContext\nmanaging the context loss.",
            "itemtype": "event",
            "name": "lost",
            "type": "Signal",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 98,
            "description": "A signal dispatched when GL context is restored, after all the managed\nobjects have been recreated.\n\nThe first argument passed to the listener is the WebGLContext\nwhich managed the restoration.\n\nThis does not gaurentee that all objects will be renderable.\nFor example, a Texture with an ImageProvider may still be loading\nasynchronously.",
            "itemtype": "event",
            "name": "restored",
            "type": "Signal",
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 146,
            "description": "Updates the width and height of this WebGL context, resizes\nthe canvas view, and calls gl.viewport() with the new size.",
            "params": [
                {
                    "name": "width",
                    "description": "the new width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the new height",
                    "type": "Number"
                }
            ],
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 164,
            "description": "(internal use)\nA managed object is anything with a \"create\" function, that will\nrestore GL state after context loss.",
            "params": [
                {
                    "name": "tex",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/WebGLContext.js",
            "line": 175,
            "description": "(internal use)\nRemoves a managed object from the cache. This is useful to destroy\na texture or shader, and have it no longer re-load on context restore.\n\nReturns the object that was removed, or null if it was not found in the cache.",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to be managed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the removed object, or null",
                "type": "Object"
            },
            "class": "WebGLContext",
            "module": "kami"
        },
        {
            "file": "lib/index-umd.js",
            "line": 1,
            "description": "Auto-generated Kami index file.\nDependencies are placed on the top-level namespace, for convenience.\nCreated on 2013-11-24",
            "class": "",
            "module": "kami"
        },
        {
            "file": "lib/index.js",
            "line": 1,
            "description": "Auto-generated Kami index file.\nCreated on 2013-11-24",
            "class": "",
            "module": "kami"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: writeonly",
            "line": " lib/glutils/Mesh.js:16"
        },
        {
            "message": "Missing item type\nCreates a new Mesh with the provided parameters.\n\nIf numIndices is 0 or falsy, no index buffer will be used\nand indices will be an empty ArrayBuffer and a null indexBuffer.\n\nIf isStatic is true, then vertexUsage and indexUsage will\nbe set to gl.STATIC_DRAW. Otherwise they will use gl.DYNAMIC_DRAW.\nYou may want to adjust these after initialization for further control.",
            "line": " lib/glutils/Mesh.js:31"
        },
        {
            "message": "Missing item type\nLocation is optional and for advanced users that\nwant vertex arrays to match across shaders. Any non-numerical\nvalue will be converted to null, and ignored. If a numerical\nvalue is given, it will override the position of this attribute\nwhen given to a mesh.",
            "line": " lib/glutils/Mesh.js:246"
        },
        {
            "message": "Missing item type\nThis is called during the ShaderProgram constructor,\nand may need to be called again after context loss and restore.",
            "line": " lib/glutils/ShaderProgram.js:37"
        },
        {
            "message": "Missing item type\nReturns the cached uniform info (size, type, location).\nIf the uniform is not found in the cache, it is assumed\nto not exist, and this method returns null.\n\nThis may return null even if the uniform is defined in GLSL:\nif it is _inactive_ (i.e. not used in the program) then it may\nbe optimized out.",
            "line": " lib/glutils/ShaderProgram.js:160"
        },
        {
            "message": "Missing item type\nReturns the cached attribute info (size, type, location).\nIf the attribute is not found in the cache, it is assumed\nto not exist, and this method returns null.\n\nThis may return null even if the attribute is defined in GLSL:\nif it is _inactive_ (i.e. not used in the program or disabled) \nthen it may be optimized out.",
            "line": " lib/glutils/ShaderProgram.js:176"
        },
        {
            "message": "Missing item type\nReturns the cached uniform location object.\nIf the uniform is not found, this method returns null.",
            "line": " lib/glutils/ShaderProgram.js:193"
        },
        {
            "message": "Missing item type\nReturns the cached uniform location object.",
            "line": " lib/glutils/ShaderProgram.js:205"
        },
        {
            "message": "Missing item type\nReturns true if the uniform is active and found in this\ncompiled program.",
            "line": " lib/glutils/ShaderProgram.js:216"
        },
        {
            "message": "Missing item type\nReturns true if the attribute is active and found in this\ncompiled program.",
            "line": " lib/glutils/ShaderProgram.js:227"
        },
        {
            "message": "Missing item type\nReturns the uniform value by name.",
            "line": " lib/glutils/ShaderProgram.js:238"
        },
        {
            "message": "Missing item type\nReturns the uniform value at the specified WebGLUniformLocation.",
            "line": " lib/glutils/ShaderProgram.js:248"
        },
        {
            "message": "Missing item type\nA convenience method to set uniformNfv from the given ArrayBuffer.\nWe determine which GL call to make based on the length of the array \nbuffer.",
            "line": " lib/glutils/ShaderProgram.js:306"
        },
        {
            "message": "Missing item type\nA convenience method to set uniformNfv from the given ArrayBuffer.\nWe determine which GL call to make based on the length of the array \nbuffer.",
            "line": " lib/glutils/ShaderProgram.js:329"
        },
        {
            "message": "Missing item type\nA simple wrapper for assets which will be passed along to the loader;\nthis is used internally.\n\n//@class AssetManager.Descriptor",
            "line": " lib/AssetManager.js:414"
        },
        {
            "message": "Missing item type\nDefines the status of an asset in the manager queue.",
            "line": " lib/AssetManager.js:436"
        },
        {
            "message": "Missing item type\nThe WebGLTexture which backs this Texture object. This\ncan be used for low-level GL calls.",
            "line": " lib/Texture.js:45"
        },
        {
            "message": "Missing item type\nWhen a texture is created, we keep track of the arguments provided to \nits constructor. On context loss and restore, these arguments are re-supplied\nto the Texture, so as to re-create it in its correct form.\n\nThis is mainly useful if you are procedurally creating textures and passing\ntheir data directly (e.g. for generic lookup tables in a shader). For image\nor media based textures, it would be better to use an AssetManager to manage\nthe asynchronous texture upload.\n\nUpon destroying a texture, a reference to this is also lost.",
            "line": " lib/Texture.js:92"
        },
        {
            "message": "Missing item type\nCalled in the Texture constructor, and after the GL context has been re-initialized. \nSubclasses can override this to provide a custom data upload, e.g. cubemaps or compressed\ntextures.",
            "line": " lib/Texture.js:113"
        },
        {
            "message": "Missing item type\nDestroys this texture by deleting the GL resource,\nremoving it from the WebGLContext management stack,\nsetting its size to zero, and id and managed arguments to null.\n\nGenerally a destroyed texture is no longer usable.",
            "line": " lib/Texture.js:145"
        },
        {
            "message": "Missing item type\nSets the min and mag filter for this texture; \nif mag is undefined or falsy, then both min and mag will use the\nfilter specified for min.\n\nYou can use Texture.Filter constants for convenience, to avoid needing \na GL reference.",
            "line": " lib/Texture.js:191"
        },
        {
            "message": "Missing item type\nUpdates the width and height of this WebGL context, resizes\nthe canvas view, and calls gl.viewport() with the new size.",
            "line": " lib/WebGLContext.js:146"
        },
        {
            "message": "Missing item type\n(internal use)\nA managed object is anything with a \"create\" function, that will\nrestore GL state after context loss.",
            "line": " lib/WebGLContext.js:164"
        },
        {
            "message": "Missing item type\n(internal use)\nRemoves a managed object from the cache. This is useful to destroy\na texture or shader, and have it no longer re-load on context restore.\n\nReturns the object that was removed, or null if it was not found in the cache.",
            "line": " lib/WebGLContext.js:175"
        },
        {
            "message": "Missing item type\nAuto-generated Kami index file.\nDependencies are placed on the top-level namespace, for convenience.\nCreated on 2013-11-24",
            "line": " lib/index-umd.js:1"
        },
        {
            "message": "Missing item type\nAuto-generated Kami index file.\nCreated on 2013-11-24",
            "line": " lib/index.js:1"
        }
    ]
}